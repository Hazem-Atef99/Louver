// <auto-generated />
using System;
using Louver.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Louver.Migrations
{
    [DbContext(typeof(LouverContext))]
    partial class LouverContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Louver.Models.AnCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("DefaultDescAr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DefaultDescEn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("HasCount")
                        .HasColumnType("int")
                        .HasColumnName("hasCount");

                    b.Property<int?>("HasHeight")
                        .HasColumnType("int")
                        .HasColumnName("hasHeight");

                    b.Property<int?>("HasLength")
                        .HasColumnType("int")
                        .HasColumnName("hasLength");

                    b.Property<int?>("HasWidth")
                        .HasColumnType("int")
                        .HasColumnName("hasWidth");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("CategoryId")
                        .HasName("PK__AN_Categ__19093A2B5C31EEB2");

                    b.ToTable("AN_Category", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnClientFileDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int?>("CatgeoryId")
                        .HasColumnType("int")
                        .HasColumnName("CatgeoryID");

                    b.Property<int?>("ClientFileitemId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFIleitemID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Hieght")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("QTY");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("DetailId")
                        .HasName("PK__AN_Clien__135C314DA845EAC6");

                    b.HasIndex("CatgeoryId");

                    b.HasIndex("ClientFileitemId");

                    b.HasIndex("TypeId");

                    b.ToTable("AN_ClientFileDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnClientFileItem", b =>
                {
                    b.Property<int>("ClientFileitemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientFIleitemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientFileitemId"));

                    b.Property<int?>("ClientFileiD")
                        .HasColumnType("int")
                        .HasColumnName("ClientFIleiD");

                    b.Property<string>("Color")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CuttingListCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CuttingListCategoryID");

                    b.Property<int?>("FinalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FinalStatusID");

                    b.Property<int?>("Grain")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitID");

                    b.HasKey("ClientFileitemId")
                        .HasName("PK__AN_Clien__92F51EADAFFAAC1C");

                    b.HasIndex("ClientFileiD");

                    b.HasIndex("CuttingListCategoryId");

                    b.HasIndex("Grain");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UnitId");

                    b.ToTable("AN_ClientFileItem", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnCuttingListCatgeory", b =>
                {
                    b.Property<int>("CuttingListCatgeoryId")
                        .HasColumnType("int")
                        .HasColumnName("CuttingListCatgeoryID");

                    b.Property<string>("DefaultDescAr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DefaultDescEn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CuttingListCatgeoryId")
                        .HasName("PK__AN_Cutti__1814C71B9C7CDFF8");

                    b.ToTable("AN_CuttingListCatgeory", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnCuttingListDetail", b =>
                {
                    b.Property<int>("CuttingListDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CuttingListDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuttingListDetailId"));

                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<string>("Color1")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int?>("Grain")
                        .HasColumnType("int");

                    b.Property<int?>("GrainId")
                        .HasColumnType("int")
                        .HasColumnName("GrainID");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("OrderBy")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    b.Property<int?>("Thickness")
                        .HasColumnType("int");

                    b.Property<int?>("ThicknessId")
                        .HasColumnType("int")
                        .HasColumnName("ThicknessID");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("CuttingListDetailId");

                    b.HasIndex("ClientFileId");

                    b.HasIndex("GrainId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SizeId");

                    b.HasIndex("ThicknessId");

                    b.ToTable("An_CuttingListDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnHandType", b =>
                {
                    b.Property<int>("HandTypeId")
                        .HasColumnType("int")
                        .HasColumnName("HandTypeID");

                    b.Property<string>("DefaultDescAr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DefaultDescEn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HandTypeId")
                        .HasName("PK__AN_HandT__3F15E4D4005E487A");

                    b.ToTable("AN_HandType", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnItemdetail", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CuttingListCatgeoryId")
                        .HasColumnType("int")
                        .HasColumnName("CuttingListCatgeoryID");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int?>("HandTypeId")
                        .HasColumnType("int")
                        .HasColumnName("HandTypeID");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18, 3)");

                    b.HasIndex("CuttingListCatgeoryId");

                    b.HasIndex("HandTypeId");

                    b.ToTable("AN_ITEMDETAIL", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("ClientAddress")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ClientNo")
                        .HasColumnType("int");

                    b.Property<int?>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ClientStatusID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fax")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RefClientId")
                        .HasColumnType("int")
                        .HasColumnName("RefClientID");

                    b.Property<string>("Tel1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ClientId")
                        .HasName("PK__CLIENTS__E67E1A04EBD6B904");

                    b.ToTable("CLIENTS", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFile", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<decimal?>("AccessoryDiscount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("ActionByDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ActionByHour")
                        .HasColumnType("int");

                    b.Property<decimal?>("AdditionalAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Additionaldiscount")
                        .HasColumnType("int")
                        .HasColumnName("additionaldiscount");

                    b.Property<decimal?>("AllPrice")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Attachment1")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Attachment2")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("AttentionMr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AttentionMrTel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientFileStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clientFileStatus");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("ClientNeed")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CombinationPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContractDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContractNo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ContractStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ContractStatusID");

                    b.Property<string>("Contractor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContractorTel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DesignOrder")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DesignStatusId")
                        .HasColumnType("int")
                        .HasColumnName("DesignStatusID");

                    b.Property<DateTime?>("DesignerDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DesignerId")
                        .HasColumnType("int")
                        .HasColumnName("DesignerID");

                    b.Property<string>("DeviceNotes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("int");

                    b.Property<string>("ExternalDoorModel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ExternalDoorQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("FactoryConfirmId")
                        .HasColumnType("int")
                        .HasColumnName("FactoryConfirmID");

                    b.Property<string>("FactoryNotes")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("FileDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FileNo")
                        .HasColumnType("int");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FileTypeID");

                    b.Property<int?>("FinalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FinalStatusID");

                    b.Property<string>("Follow")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("InternalDoorModel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("InternalDoorQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvoiceNo")
                        .HasColumnType("int");

                    b.Property<int?>("KitchecnModelId")
                        .HasColumnType("int")
                        .HasColumnName("KitchecnModelID");

                    b.Property<int?>("KitchenHeight")
                        .HasColumnType("int");

                    b.Property<string>("KitchenLocation")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("MeasurmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Measurmentid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Modifiedby")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OfferNo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Owner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PatternType")
                        .HasColumnType("int");

                    b.Property<string>("Project")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProjectManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("RelatedClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("RelatedClientFileID");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Remarks2")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("SalesId")
                        .HasColumnType("int")
                        .HasColumnName("SalesID");

                    b.Property<DateTime?>("SentToFactoryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Sitet")
                        .HasColumnType("int");

                    b.Property<int?>("StartMonth")
                        .HasColumnType("int");

                    b.Property<int?>("StartWeek")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("Structure")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TarkeebDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TopDiscount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("WindowPrefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("WithTax")
                        .HasColumnType("int");

                    b.HasKey("ClientFileId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientFile", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileAnalyse", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int>("ClientFileiD")
                        .HasColumnType("int")
                        .HasColumnName("ClientFIleiD");

                    b.Property<string>("Color")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsGlass")
                        .HasColumnType("int");

                    b.Property<int?>("IsManual")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<string>("ItemCount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Length")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DetailId", "ClientFileiD");

                    b.ToTable("ClientFileAnalyse", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileAttachment", b =>
                {
                    b.Property<int>("ClientFileAttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileAttachmentID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ClientFileAttachmentId", "ClientFileId");

                    b.ToTable("ClientFileAttachment", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileDetail", b =>
                {
                    b.Property<int>("ClientFileDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileDetailID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<string>("AdditionalSide")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("BaneltypeId")
                        .HasColumnType("int")
                        .HasColumnName("BaneltypeID");

                    b.Property<int?>("BaterryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BaterryTypeID");

                    b.Property<int?>("CarkeesTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CarkeesTypeID");

                    b.Property<int?>("ClientFileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FasalehTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FasalehTypeID");

                    b.Property<int?>("GlassTypeId")
                        .HasColumnType("int")
                        .HasColumnName("GlassTypeID");

                    b.Property<int?>("HandModelId")
                        .HasColumnType("int")
                        .HasColumnName("HandModelID");

                    b.Property<int?>("Hieght")
                        .HasColumnType("int");

                    b.Property<int?>("MainColorId")
                        .HasColumnType("int")
                        .HasColumnName("MainColorID");

                    b.Property<int?>("MajlahTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MajlahTypeID");

                    b.Property<int?>("MajlehHallId")
                        .HasColumnType("int")
                        .HasColumnName("MajlehHallID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("SubColorId")
                        .HasColumnType("int")
                        .HasColumnName("SubColorID");

                    b.Property<int?>("TopColorId")
                        .HasColumnType("int")
                        .HasColumnName("TopColorID");

                    b.Property<int?>("TopTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TopTypeID");

                    b.Property<int?>("TopWidth")
                        .HasColumnType("int");

                    b.Property<int?>("WaterProofHieght")
                        .HasColumnType("int");

                    b.HasKey("ClientFileDetailId", "ClientFileId");

                    b.HasIndex("ClientFileId");

                    b.ToTable("CLientFileDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileDevice", b =>
                {
                    b.Property<int>("ClientFileDeviceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileDeviceID");

                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    b.Property<int?>("DeviceModelId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceModelID");

                    b.Property<int?>("Hieght")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("ClientFileDeviceId");

                    b.HasIndex("ClientFileId");

                    b.ToTable("ClientFileDevice", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileFollow", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("ClientFileFollowId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileFollowID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastAction")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NoteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ClientFileId", "ClientFileFollowId")
                        .HasName("pk_ClientFileFollow");

                    b.ToTable("ClientFileFollow", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileItem", b =>
                {
                    b.Property<int>("ClientFileItemId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileItemID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<string>("AccOption")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<int?>("DoorHole")
                        .HasColumnType("int");

                    b.Property<int?>("DoorTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DoorTypeID");

                    b.Property<decimal?>("Hieght")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ItemColorId")
                        .HasColumnType("int")
                        .HasColumnName("ItemColorID");

                    b.Property<decimal?>("ItemCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("ItemName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("ItemPrice")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("ItemPriceAfterDiscount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<string>("Itemcolor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("itemcolor");

                    b.Property<int?>("KaabTypeId")
                        .HasColumnType("int")
                        .HasColumnName("KaabTypeID");

                    b.Property<int?>("LenghtSection")
                        .HasColumnType("int");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfRoof")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOTES");

                    b.Property<int?>("Serial")
                        .HasColumnType("int");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("WidthSection")
                        .HasColumnType("int");

                    b.Property<int?>("WithAbajur")
                        .HasColumnType("int");

                    b.Property<int?>("WithMotor")
                        .HasColumnType("int");

                    b.HasKey("ClientFileItemId", "ClientFileId");

                    b.HasIndex("ClientFileId");

                    b.ToTable("ClientFileItem", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileItem20210702", b =>
                {
                    b.Property<string>("AccOption")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("ClientFileItemId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileItemID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<int?>("DoorTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DoorTypeID");

                    b.Property<int?>("Hieght")
                        .HasColumnType("int");

                    b.Property<int?>("ItemColorId")
                        .HasColumnType("int")
                        .HasColumnName("ItemColorID");

                    b.Property<decimal?>("ItemCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<decimal?>("ItemPrice")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("ItemPriceAfterDiscount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<int?>("Itemcolor")
                        .HasColumnType("int")
                        .HasColumnName("itemcolor");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOTES");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.ToTable("CLientFileITEm20210702", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileLog", b =>
                {
                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<string>("FromValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("ToValue")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasIndex(new[] { "ClientFileId" }, "ix_ClientFileLog");

                    b.ToTable("ClientFileLog", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFilePayment", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("ClientFileId", "PaymentId", "DetailId")
                        .HasName("pk_clientfilePayment");

                    b.ToTable("ClientFilePayments");
                });

            modelBuilder.Entity("Louver.Models.ClientFileProperty", b =>
                {
                    b.Property<int>("ClientFileDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileDetailID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<string>("AdditionalSide")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("BanelCount")
                        .HasColumnType("int");

                    b.Property<int?>("BaneltypeId")
                        .HasColumnType("int")
                        .HasColumnName("BaneltypeID");

                    b.Property<int?>("BaterryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BaterryTypeID");

                    b.Property<int?>("CarkeesTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CarkeesTypeID");

                    b.Property<int?>("ClientFileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileTypeID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FasalehTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FasalehTypeID");

                    b.Property<int?>("GlassTypeId")
                        .HasColumnType("int")
                        .HasColumnName("GlassTypeID");

                    b.Property<int?>("HandCount")
                        .HasColumnType("int");

                    b.Property<int?>("HandModelId")
                        .HasColumnType("int")
                        .HasColumnName("HandModelID");

                    b.Property<int?>("Hieght")
                        .HasColumnType("int");

                    b.Property<int?>("HoleCount")
                        .HasColumnType("int");

                    b.Property<int?>("HoleId")
                        .HasColumnType("int")
                        .HasColumnName("HoleID");

                    b.Property<int?>("KitchenTypeId")
                        .HasColumnType("int")
                        .HasColumnName("KitchenTypeID");

                    b.Property<int?>("MainColorId")
                        .HasColumnType("int")
                        .HasColumnName("MainColorID");

                    b.Property<int?>("MajlahTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MajlahTypeID");

                    b.Property<int?>("MajlehHallId")
                        .HasColumnType("int")
                        .HasColumnName("MajlehHallID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ShaffatId")
                        .HasColumnType("int")
                        .HasColumnName("ShaffatID");

                    b.Property<int?>("SubColorId")
                        .HasColumnType("int")
                        .HasColumnName("SubColorID");

                    b.Property<int?>("TopColorId")
                        .HasColumnType("int")
                        .HasColumnName("TopColorID");

                    b.Property<int?>("TopCount")
                        .HasColumnType("int");

                    b.Property<int?>("TopTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TopTypeID");

                    b.Property<int?>("TopWidth")
                        .HasColumnType("int");

                    b.Property<int?>("WaterProofHieght")
                        .HasColumnType("int");

                    b.HasKey("ClientFileDetailId", "ClientFileId");

                    b.HasIndex("ClientFileId");

                    b.ToTable("CLientFileProperties", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileProperty1", b =>
                {
                    b.Property<int?>("Accessories")
                        .HasColumnType("int");

                    b.Property<string>("AccessoriesDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("AllAccessories")
                        .HasColumnType("int");

                    b.Property<string>("AllAccessoriesDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AnticDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("AnticId")
                        .HasColumnType("int")
                        .HasColumnName("AnticID");

                    b.Property<decimal?>("BanelCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("BanelDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("BanelId")
                        .HasColumnType("int")
                        .HasColumnName("BanelID");

                    b.Property<decimal?>("BanelPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<int?>("Bank")
                        .HasColumnType("int");

                    b.Property<string>("BankDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BatteryDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("BatteryId")
                        .HasColumnType("int")
                        .HasColumnName("BatteryID");

                    b.Property<string>("CarcaseTypeNoteDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CladdingDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("CladdingId")
                        .HasColumnType("int")
                        .HasColumnName("CladdingID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<int?>("Color2")
                        .HasColumnType("int");

                    b.Property<string>("Color2Desc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("ColumnTableCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("ColumnTableDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ColumnTableId")
                        .HasColumnType("int")
                        .HasColumnName("ColumnTableID");

                    b.Property<string>("CovingDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("CovingId")
                        .HasColumnType("int")
                        .HasColumnName("CovingID");

                    b.Property<decimal?>("CurrentLightPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<int?>("Devices")
                        .HasColumnType("int");

                    b.Property<string>("DevicesDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FasalatTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("FasalatTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FasalatTypeID");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FileTypeID");

                    b.Property<int?>("Fitting")
                        .HasColumnType("int");

                    b.Property<string>("FittingDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Front")
                        .HasColumnType("int");

                    b.Property<string>("FrontDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FrontTypeNoteDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("GlassTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("GlassTypeId")
                        .HasColumnType("int")
                        .HasColumnName("GlassTypeID");

                    b.Property<decimal?>("HandCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("HandModelDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("HandModelId")
                        .HasColumnType("int")
                        .HasColumnName("HandModelID");

                    b.Property<decimal?>("HandPrice")
                        .HasColumnType("decimal(38, 8)")
                        .HasColumnName("handPrice");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("HeightDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Hole")
                        .HasColumnType("int");

                    b.Property<decimal?>("HoleCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("HoleDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("IncreaseTopPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<decimal?>("IslandTopCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("IslandTopDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("IslandTopId")
                        .HasColumnType("int")
                        .HasColumnName("IslandTopID");

                    b.Property<int?>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("ItemTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Karcas")
                        .HasColumnType("int");

                    b.Property<string>("KarcasDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("KitchenHeight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("KitchenHeightNoteDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("KitchenStrip")
                        .HasColumnType("int");

                    b.Property<string>("KitchenTypeDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("KitchenTypeId")
                        .HasColumnType("int")
                        .HasColumnName("KitchenTypeID");

                    b.Property<decimal?>("KitchenWidth")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("LightDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MainColorDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("MainColorId")
                        .HasColumnType("int")
                        .HasColumnName("MainColorID");

                    b.Property<string>("MajlaDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MajlaHoleDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("MajlaHoleId")
                        .HasColumnType("int")
                        .HasColumnName("MajlaHoleID");

                    b.Property<int?>("MajlaId")
                        .HasColumnType("int")
                        .HasColumnName("MajlaID");

                    b.Property<decimal?>("MajlahHolePrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<decimal?>("MajlahPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<int?>("Model")
                        .HasColumnType("int");

                    b.Property<string>("ModelDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PatternType")
                        .HasColumnType("int");

                    b.Property<string>("PatternTypeDesc")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("Rule1")
                        .HasColumnType("int");

                    b.Property<int>("Rule2")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryColorDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SecondaryColorId")
                        .HasColumnType("int")
                        .HasColumnName("SecondaryColorID");

                    b.Property<string>("ServiceDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("ServicePrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<decimal?>("SideTopCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("SideTopDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SideTopId")
                        .HasColumnType("int")
                        .HasColumnName("SideTopID");

                    b.Property<decimal?>("SplashCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("SplashDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SplashId")
                        .HasColumnType("int")
                        .HasColumnName("SplashID");

                    b.Property<string>("StripDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SubColorDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SubColorId")
                        .HasColumnType("int")
                        .HasColumnName("SubColorID");

                    b.Property<int?>("Suction")
                        .HasColumnType("int");

                    b.Property<string>("SuctionDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("SuctionPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<decimal?>("TableTopCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("TableTopDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TableTopId")
                        .HasColumnType("int")
                        .HasColumnName("TableTopID");

                    b.Property<decimal?>("TapPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<decimal?>("Tasfee7Wood")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TextureDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TextureId")
                        .HasColumnType("int")
                        .HasColumnName("TextureID");

                    b.Property<int?>("TheTop")
                        .HasColumnType("int")
                        .HasColumnName("THeTop");

                    b.Property<string>("TheTopDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("THeTopDesc");

                    b.Property<decimal?>("TopCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("TopInWallPrice")
                        .HasColumnType("decimal(38, 8)");

                    b.Property<string>("VisibleColor")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("WallTopCount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("WallTopDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("WallTopId")
                        .HasColumnType("int")
                        .HasColumnName("WallTopID");

                    b.ToTable((string)null);

                    b.ToView("ClientFileProperty", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileRelatedDate", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int?>("AssempleTeamId")
                        .HasColumnType("int")
                        .HasColumnName("assempleTeamId");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("date");

                    b.Property<int?>("FormalId")
                        .HasColumnType("int")
                        .HasColumnName("FormalID");

                    b.Property<int?>("OperationTeamId")
                        .HasColumnType("int")
                        .HasColumnName("operationTeamId");

                    b.Property<int?>("OperatorFormalId")
                        .HasColumnType("int")
                        .HasColumnName("operatorFormalId");

                    b.Property<int?>("PaintFormalId")
                        .HasColumnType("int")
                        .HasColumnName("paintFormalId");

                    b.Property<int?>("PaintTeamId")
                        .HasColumnType("int")
                        .HasColumnName("paintTeamId");

                    b.Property<DateTime?>("ProductionAnalyzeDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ProductionEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ProductiorStartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartPaintDate")
                        .HasColumnType("date");

                    b.HasKey("ClientFileId");

                    b.HasIndex("AssempleTeamId");

                    b.HasIndex("OperationTeamId");

                    b.HasIndex("PaintTeamId");

                    b.ToTable("ClientFileRelatedDates");
                });

            modelBuilder.Entity("Louver.Models.ClientFileStatus", b =>
                {
                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.ToTable("ClientFileStatus", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileTawseel", b =>
                {
                    b.Property<string>("AttachementPath")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ATtachementPath");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<decimal?>("KitchenHeight")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PointDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("TarkeebDate")
                        .HasColumnType("datetime");

                    b.ToTable("ClientFileTawseel", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileTop", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("PanelTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PanelTypeID");

                    b.Property<int?>("SinkHoleId")
                        .HasColumnType("int");

                    b.Property<string>("TopColor")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("TopHieght")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("DetailId", "ClientFileId");

                    b.ToTable("ClientFileTop", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientFileTopDevice", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("DetailId", "ClientFileId", "Id");

                    b.ToTable("ClientFileTopDevices");
                });

            modelBuilder.Entity("Louver.Models.ClientFollow2", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("ClientFollow2Id")
                        .HasColumnType("int")
                        .HasColumnName("ClientFollow2ID");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Follow2Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("ClientFileId", "ClientFollow2Id")
                        .HasName("pk_ClientFollow2");

                    b.ToTable("ClientFollow2", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientMaintainanceAttachment", b =>
                {
                    b.Property<int>("ClientFileAttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileAttachmentID");

                    b.Property<int>("ClientMaintainanceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMaintainanceID");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ClientFileAttachmentId", "ClientMaintainanceId")
                        .HasName("PK_ClientFileMaintainanceATT");

                    b.ToTable("ClientMaintainanceAttachment", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CheckNo")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PaidFor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PaidTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PaidTypeID");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentNo")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("SaleID");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("PaymentId")
                        .HasName("PK__ClientPa__9B556A587C82F1C5");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientPayment", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientShortage", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("ClientShortageId")
                        .HasColumnType("int")
                        .HasColumnName("ClientShortageID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("ShortageDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TarkeebBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("TarkeebDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClientFileId", "ClientShortageId")
                        .HasName("pk_ClientShortage");

                    b.ToTable("ClientShortage", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientShortageAttachment", b =>
                {
                    b.Property<int>("ClientFileAttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileAttachmentID");

                    b.Property<int>("ClientShortageId")
                        .HasColumnType("int")
                        .HasColumnName("ClientShortageID");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ClientFileAttachmentId", "ClientShortageId")
                        .HasName("PK_ClientFileShortageATT");

                    b.ToTable("ClientShortageAttachment", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientShortageDetail", b =>
                {
                    b.Property<int>("ClientShortageId")
                        .HasColumnType("int")
                        .HasColumnName("ClientShortageID");

                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<string>("Bayan")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<decimal?>("Hieght")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("InternalColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItemCount")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("QshatColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TarkeebBy")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ClientShortageId", "DetailId")
                        .HasName("pk_ClientShortageDetail");

                    b.HasIndex("ClientFileId", "ClientShortageId");

                    b.ToTable("ClientShortageDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientSurvey", b =>
                {
                    b.Property<int>("ClientSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("ClientSurveyID");

                    b.Property<string>("AwardCertificate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SurveyDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClientSurveyId")
                        .HasName("PK__ClientSu__88BE9D53ECDFD072");

                    b.HasIndex("ClientFileId");

                    b.ToTable("ClientSurvey", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientSurveyAnswer", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<int>("ClientSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("ClientSurveyID");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "ClientSurveyId")
                        .HasName("pk_ClientSurveyAnswer");

                    b.HasIndex("AnswerId");

                    b.HasIndex("ClientSurveyId");

                    b.ToTable("ClientSurveyAnswer", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ClientSurveyDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int>("ClientSurveyId")
                        .HasColumnType("int")
                        .HasColumnName("ClientSurveyID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("SurveyNotes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("DetailId", "ClientSurveyId")
                        .HasName("pk_ClientSurveyDetail");

                    b.HasIndex("ClientSurveyId");

                    b.ToTable("ClientSurveyDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Clientmaintainance", b =>
                {
                    b.Property<int>("ClientFileId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFileID");

                    b.Property<int>("ClientMaintainanceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientMaintainanceID");

                    b.Property<string>("Attachmentpath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("ATTACHMENTPATH");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("MaintainanceDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("TarkeebDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClientFileId", "ClientMaintainanceId")
                        .HasName("pk_Clientmaintainance");

                    b.ToTable("Clientmaintainance", (string)null);
                });

            modelBuilder.Entity("Louver.Models.CurrFile", b =>
                {
                    b.Property<string>("CurrDescGroupAr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrDescGroupAR");

                    b.Property<string>("CurrDescSingleAr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrDescSingleAR");

                    b.Property<string>("CurrSmallUnitAr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CurrSmallUnitAR");

                    b.ToTable("CurrFile", (string)null);
                });

            modelBuilder.Entity("Louver.Models.DayNumber", b =>
                {
                    b.Property<int?>("Dayid")
                        .HasColumnType("int")
                        .HasColumnName("dayid");

                    b.ToTable("DayNumber", (string)null);
                });

            modelBuilder.Entity("Louver.Models.DoorDetail", b =>
                {
                    b.Property<string>("Architrave1")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Architrave2")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("BottomRails")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Core")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("core");

                    b.Property<string>("DecorativeProfile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DoorId")
                        .HasColumnType("int")
                        .HasColumnName("DoorID");

                    b.Property<string>("Edges")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Face")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Jamb")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Paint")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Panels")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rubber")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("rubber");

                    b.Property<string>("Stiles")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("stiles");

                    b.Property<string>("TopRails")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Woodveneer")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("woodveneer");

                    b.ToTable("DoorDetails");
                });

            modelBuilder.Entity("Louver.Models.ItemDetail", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ItemDetailID");

                    b.Property<decimal?>("Hieght")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<string>("ItemCount")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("Lenght")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Length")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Width")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ItemId", "ItemDetailId")
                        .HasName("pk_ItemDetail");

                    b.ToTable("ItemDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ItemTypePrice", b =>
                {
                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("ItemTypePrice", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ItemTypePrice20200218", b =>
                {
                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.ToTable("ITemTYpePrice20200218", (string)null);
                });

            modelBuilder.Entity("Louver.Models.ItemTypePrice20220609", b =>
                {
                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.ToTable("ItemTypePrice20220609", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Itemtypeprice20220320", b =>
                {
                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.ToTable("ITEMTYPEPRICE20220320", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Itemtypeprice20220616", b =>
                {
                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.ToTable("itemtypeprice20220616", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Money", b =>
                {
                    b.Property<int>("MoneyNo")
                        .HasColumnType("int")
                        .HasColumnName("Money_No");

                    b.Property<string>("MoneyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Money_name");

                    b.HasKey("MoneyNo");

                    b.ToTable("Money");
                });

            modelBuilder.Entity("Louver.Models.NotifciationSetupDetail", b =>
                {
                    b.Property<int>("NotifciationSetupId")
                        .HasColumnType("int")
                        .HasColumnName("NotifciationSetupID");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int?>("AllowDelete")
                        .HasColumnType("int");

                    b.Property<int?>("AllowEdit")
                        .HasColumnType("int");

                    b.Property<int?>("FromApprovalProcessId")
                        .HasColumnType("int")
                        .HasColumnName("FromApprovalProcessID");

                    b.Property<int?>("ToApprovalProcessId")
                        .HasColumnType("int")
                        .HasColumnName("ToApprovalProcessID");

                    b.HasKey("NotifciationSetupId", "LevelId")
                        .HasName("pk_NotifciationSetupDetail");

                    b.ToTable("NotifciationSetupDetail", (string)null);
                });

            modelBuilder.Entity("Louver.Models.NotifciationSetupUserType", b =>
                {
                    b.Property<int>("NotifciationSetupId")
                        .HasColumnType("int")
                        .HasColumnName("NotifciationSetupID");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    b.Property<string>("MessageFormat")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("MessageFormatAr")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("MessageFormatAR");

                    b.HasKey("NotifciationSetupId", "LevelId", "UserTypeId")
                        .HasName("pk_NotifciationSetupUsers");

                    b.ToTable("NotifciationSetupUserType", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E3293C0610D");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Louver.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("DoorPrefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KitchenImageFile")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("KitchenPrefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("LogoBinary")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReportFile")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ValidateId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ValidateID");

                    b.Property<string>("ValidatePeriod")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("WindowPrefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProjectId")
                        .HasName("PK__Projects__761ABED04E3EF124");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Louver.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("QuestionDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06F8CFBED08A8");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Louver.Models.QusetionAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<string>("AnswerDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AnswerId")
                        .HasName("pk_QusetionAnswer");

                    b.ToTable("QusetionAnswer", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DescriptionAr")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("EndDate")
                        .HasColumnType("int");

                    b.Property<int?>("IsDismissed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("Pk")
                        .HasColumnType("int")
                        .HasColumnName("PK");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__Reminder__3214EC27F2E91B85");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Louver.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("AluminiumEquation")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("AluminiumEquationWidth")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ApajurEquation")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ApajurEquationWidth")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DarfehEquation")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DarfehEquationWidth")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("DetailCount")
                        .HasColumnType("int");

                    b.Property<string>("GlassEquation")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("GlassEquationWidth")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("HalqEquation")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("HalqEquationWidth")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("HasAcc")
                        .HasColumnType("int");

                    b.Property<int?>("HasDorj")
                        .HasColumnType("int");

                    b.Property<int?>("HasFassaleh")
                        .HasColumnType("int");

                    b.Property<int?>("HasHand")
                        .HasColumnType("int");

                    b.Property<int?>("HasLegs")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("IsDefault")
                        .HasColumnType("int");

                    b.Property<int?>("IsFarez")
                        .HasColumnType("int");

                    b.Property<int?>("IsGlass")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("MonkholEquation")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("MonkholEquationWidth")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("StatusCategoryID");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID");

                    b.Property<int?>("VacationDays")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.HasIndex("StatusCategoryId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Status2020", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("IsDefault")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("StatusCategoryID");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID");

                    b.Property<int?>("VacationDays")
                        .HasColumnType("int");

                    b.ToTable("Status2020", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Status20201", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("IsDefault")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("StatusCategoryID");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID");

                    b.Property<int?>("VacationDays")
                        .HasColumnType("int");

                    b.ToTable("Status20201", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Status202101301", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Currency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("IsDefault")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ItemCategoryID");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ItemTypeID");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("StatusCategoryID");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID");

                    b.Property<int?>("VacationDays")
                        .HasColumnType("int");

                    b.ToTable("Status20210130_1", (string)null);
                });

            modelBuilder.Entity("Louver.Models.StatusCategory", b =>
                {
                    b.Property<int>("StatusCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("StatusCategoryID");

                    b.Property<string>("DefaultDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.HasKey("StatusCategoryId");

                    b.ToTable("StatusCategory", (string)null);
                });

            modelBuilder.Entity("Louver.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientFileId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("teamName");

                    b.Property<string>("TeamType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("teamType");

                    b.HasKey("Id");

                    b.HasIndex("ClientFileId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Louver.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageAttachement")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("IsAdmin")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    b.HasKey("UserId")
                        .HasName("PK_Inv_Users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Louver.Models.UsersTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Teams", (string)null);
                });

            modelBuilder.Entity("Louver.Models.AnClientFileDetail", b =>
                {
                    b.HasOne("Louver.Models.AnCategory", "Catgeory")
                        .WithMany("AnClientFileDetails")
                        .HasForeignKey("CatgeoryId")
                        .HasConstraintName("FK_AN_ClientFileDetail_AN_Category");

                    b.HasOne("Louver.Models.AnClientFileItem", "ClientFileitem")
                        .WithMany("AnClientFileDetails")
                        .HasForeignKey("ClientFileitemId")
                        .HasConstraintName("FK_AN_ClientFileDetail_AN_ClientFileItem");

                    b.HasOne("Louver.Models.AnCuttingListCatgeory", "Type")
                        .WithMany("AnClientFileDetails")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_AN_ClientFileDetail_FK5");

                    b.Navigation("Catgeory");

                    b.Navigation("ClientFileitem");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Louver.Models.AnClientFileItem", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("AnClientFileItems")
                        .HasForeignKey("ClientFileiD")
                        .HasConstraintName("FK_AN_ClientFileDetail_ClientFile");

                    b.HasOne("Louver.Models.AnCuttingListCatgeory", "CuttingListCategory")
                        .WithMany("AnClientFileItems")
                        .HasForeignKey("CuttingListCategoryId")
                        .HasConstraintName("FK_AN_ClientFileDetail_FK1");

                    b.HasOne("Louver.Models.Status", "GrainNavigation")
                        .WithMany("AnClientFileItemGrainNavigations")
                        .HasForeignKey("Grain")
                        .HasConstraintName("grain");

                    b.HasOne("Louver.Models.Status", "Material")
                        .WithMany("AnClientFileItemMaterials")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("material");

                    b.HasOne("Louver.Models.Status", "Unit")
                        .WithMany("AnClientFileItemUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("unit");

                    b.Navigation("ClientFile");

                    b.Navigation("CuttingListCategory");

                    b.Navigation("GrainNavigation");

                    b.Navigation("Material");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Louver.Models.AnCuttingListDetail", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("AnCuttingListDetails")
                        .HasForeignKey("ClientFileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_An_CuttingListDetail_ClientFile");

                    b.HasOne("Louver.Models.Status", "GrainNavigation")
                        .WithMany("AnCuttingListDetailGrainNavigations")
                        .HasForeignKey("GrainId")
                        .HasConstraintName("Grain_cuttingList");

                    b.HasOne("Louver.Models.Status", "Material")
                        .WithMany("AnCuttingListDetailMaterials")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("An_CuttingListDetail_Status1_material");

                    b.HasOne("Louver.Models.Status", "SizeNavigation")
                        .WithMany("AnCuttingListDetailSizeNavigations")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("Size");

                    b.HasOne("Louver.Models.Status", "ThicknessNavigation")
                        .WithMany("AnCuttingListDetailThicknessNavigations")
                        .HasForeignKey("ThicknessId")
                        .HasConstraintName("Thikness");

                    b.Navigation("ClientFile");

                    b.Navigation("GrainNavigation");

                    b.Navigation("Material");

                    b.Navigation("SizeNavigation");

                    b.Navigation("ThicknessNavigation");
                });

            modelBuilder.Entity("Louver.Models.AnItemdetail", b =>
                {
                    b.HasOne("Louver.Models.AnCuttingListCatgeory", "CuttingListCatgeory")
                        .WithMany()
                        .HasForeignKey("CuttingListCatgeoryId")
                        .HasConstraintName("fk_AN_ITEMDETAIL2");

                    b.HasOne("Louver.Models.AnCategory", "HandType")
                        .WithMany()
                        .HasForeignKey("HandTypeId")
                        .HasConstraintName("fk_AN_ITEMDETAIL3");

                    b.HasOne("Louver.Models.AnHandType", "HandTypeNavigation")
                        .WithMany()
                        .HasForeignKey("HandTypeId")
                        .HasConstraintName("fk_AN_ITEMDETAIL1");

                    b.Navigation("CuttingListCatgeory");

                    b.Navigation("HandType");

                    b.Navigation("HandTypeNavigation");
                });

            modelBuilder.Entity("Louver.Models.ClientFile", b =>
                {
                    b.HasOne("Louver.Models.ClientFileRelatedDate", "ClientFileNavigation")
                        .WithOne("ClientFile")
                        .HasForeignKey("Louver.Models.ClientFile", "ClientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientFile_ClientFileRelatedDates");

                    b.HasOne("Louver.Models.Client", "Client")
                        .WithMany("ClientFiles")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientFile_CLIENTS");

                    b.Navigation("Client");

                    b.Navigation("ClientFileNavigation");
                });

            modelBuilder.Entity("Louver.Models.ClientFileDetail", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("ClientFileDetails")
                        .HasForeignKey("ClientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_CLientFileDetail_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientFileDevice", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("ClientFileDevices")
                        .HasForeignKey("ClientFileId")
                        .HasConstraintName("FK_ClientFileDevice_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientFileFollow", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("ClientFileFollows")
                        .HasForeignKey("ClientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientFileFollow_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientFileItem", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("ClientFileItems")
                        .HasForeignKey("ClientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientFileItem_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientFileProperty", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("ClientFileProperties")
                        .HasForeignKey("ClientFileId")
                        .IsRequired()
                        .HasConstraintName("FK_CLientFileProperties_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientFileRelatedDate", b =>
                {
                    b.HasOne("Louver.Models.Team", "AssempleTeam")
                        .WithMany("ClientFileRelatedDateAssempleTeams")
                        .HasForeignKey("AssempleTeamId")
                        .HasConstraintName("FK_ClientFileRelatedDates_Teams2");

                    b.HasOne("Louver.Models.Team", "OperationTeam")
                        .WithMany("ClientFileRelatedDateOperationTeams")
                        .HasForeignKey("OperationTeamId")
                        .HasConstraintName("FK_ClientFileRelatedDates_Teams1");

                    b.HasOne("Louver.Models.Team", "PaintTeam")
                        .WithMany("ClientFileRelatedDatePaintTeams")
                        .HasForeignKey("PaintTeamId")
                        .HasConstraintName("FK_ClientFileRelatedDates_Teams");

                    b.Navigation("AssempleTeam");

                    b.Navigation("OperationTeam");

                    b.Navigation("PaintTeam");
                });

            modelBuilder.Entity("Louver.Models.ClientPayment", b =>
                {
                    b.HasOne("Louver.Models.Client", "Client")
                        .WithMany("ClientPayments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ClientPayment_CLIENTS");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Louver.Models.ClientShortageDetail", b =>
                {
                    b.HasOne("Louver.Models.ClientShortage", "Client")
                        .WithMany("ClientShortageDetails")
                        .HasForeignKey("ClientFileId", "ClientShortageId")
                        .HasConstraintName("fk_ClientShortageDetail");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Louver.Models.ClientSurvey", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("ClientSurveys")
                        .HasForeignKey("ClientFileId")
                        .HasConstraintName("FK_ClientSurvey_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientSurveyAnswer", b =>
                {
                    b.HasOne("Louver.Models.QusetionAnswer", "Answer")
                        .WithMany("ClientSurveyAnswers")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_ClientSurveyAnswer_QusetionAnswer");

                    b.HasOne("Louver.Models.ClientSurvey", "ClientSurvey")
                        .WithMany("ClientSurveyAnswers")
                        .HasForeignKey("ClientSurveyId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientSurveyAnswer_ClientSurvey");

                    b.HasOne("Louver.Models.Question", "Question")
                        .WithMany("ClientSurveyAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientSurveyAnswer_Question");

                    b.Navigation("Answer");

                    b.Navigation("ClientSurvey");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Louver.Models.ClientSurveyDetail", b =>
                {
                    b.HasOne("Louver.Models.ClientSurvey", "ClientSurvey")
                        .WithMany("ClientSurveyDetails")
                        .HasForeignKey("ClientSurveyId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientSurveyDetail_ClientSurvey");

                    b.Navigation("ClientSurvey");
                });

            modelBuilder.Entity("Louver.Models.ItemTypePrice", b =>
                {
                    b.HasOne("Louver.Models.Status", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemTypePrice_Status");

                    b.HasOne("Louver.Models.Status", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .HasConstraintName("FK_ItemTypePrice_Status1");

                    b.Navigation("Item");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Louver.Models.Status", b =>
                {
                    b.HasOne("Louver.Models.StatusCategory", "StatusCategory")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusCategoryId")
                        .HasConstraintName("FK_Status_StatusCategory");

                    b.Navigation("StatusCategory");
                });

            modelBuilder.Entity("Louver.Models.Team", b =>
                {
                    b.HasOne("Louver.Models.ClientFile", "ClientFile")
                        .WithMany("Teams")
                        .HasForeignKey("ClientFileId")
                        .HasConstraintName("FK_Teams_ClientFile");

                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.UsersTeam", b =>
                {
                    b.HasOne("Louver.Models.Team", "Team")
                        .WithMany("UsersTeams")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_Users_Teams_Teams");

                    b.HasOne("Louver.Models.User", "User")
                        .WithMany("UsersTeams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Users_Teams_Users");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Louver.Models.AnCategory", b =>
                {
                    b.Navigation("AnClientFileDetails");
                });

            modelBuilder.Entity("Louver.Models.AnClientFileItem", b =>
                {
                    b.Navigation("AnClientFileDetails");
                });

            modelBuilder.Entity("Louver.Models.AnCuttingListCatgeory", b =>
                {
                    b.Navigation("AnClientFileDetails");

                    b.Navigation("AnClientFileItems");
                });

            modelBuilder.Entity("Louver.Models.Client", b =>
                {
                    b.Navigation("ClientFiles");

                    b.Navigation("ClientPayments");
                });

            modelBuilder.Entity("Louver.Models.ClientFile", b =>
                {
                    b.Navigation("AnClientFileItems");

                    b.Navigation("AnCuttingListDetails");

                    b.Navigation("ClientFileDetails");

                    b.Navigation("ClientFileDevices");

                    b.Navigation("ClientFileFollows");

                    b.Navigation("ClientFileItems");

                    b.Navigation("ClientFileProperties");

                    b.Navigation("ClientSurveys");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Louver.Models.ClientFileRelatedDate", b =>
                {
                    b.Navigation("ClientFile");
                });

            modelBuilder.Entity("Louver.Models.ClientShortage", b =>
                {
                    b.Navigation("ClientShortageDetails");
                });

            modelBuilder.Entity("Louver.Models.ClientSurvey", b =>
                {
                    b.Navigation("ClientSurveyAnswers");

                    b.Navigation("ClientSurveyDetails");
                });

            modelBuilder.Entity("Louver.Models.Question", b =>
                {
                    b.Navigation("ClientSurveyAnswers");
                });

            modelBuilder.Entity("Louver.Models.QusetionAnswer", b =>
                {
                    b.Navigation("ClientSurveyAnswers");
                });

            modelBuilder.Entity("Louver.Models.Status", b =>
                {
                    b.Navigation("AnClientFileItemGrainNavigations");

                    b.Navigation("AnClientFileItemMaterials");

                    b.Navigation("AnClientFileItemUnits");

                    b.Navigation("AnCuttingListDetailGrainNavigations");

                    b.Navigation("AnCuttingListDetailMaterials");

                    b.Navigation("AnCuttingListDetailSizeNavigations");

                    b.Navigation("AnCuttingListDetailThicknessNavigations");
                });

            modelBuilder.Entity("Louver.Models.StatusCategory", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Louver.Models.Team", b =>
                {
                    b.Navigation("ClientFileRelatedDateAssempleTeams");

                    b.Navigation("ClientFileRelatedDateOperationTeams");

                    b.Navigation("ClientFileRelatedDatePaintTeams");

                    b.Navigation("UsersTeams");
                });

            modelBuilder.Entity("Louver.Models.User", b =>
                {
                    b.Navigation("UsersTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
